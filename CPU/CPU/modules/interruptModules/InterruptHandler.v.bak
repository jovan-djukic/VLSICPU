module InterruptHandler(externalInterrupts, PSWI, setInterrupt, resetInterrupt, address, interruptPresent, interruptNumber);

parameter WIDTH					= 16;
parameter ADDRESS_WIDTH	= 32;
parameter NUMBER_WIDTH	= 4;

input		wire[WIDTH - 1 				: 0] 	externalInterrupts, setInterrupt, resetInterrupt;
input		wire											 	PSWI;
output	reg	[ADDRESS_WIDTH -1	: 0]	address;
output	reg													interruptPresent;
output 	reg	[NUMBER_WIDTH - 1	:	0] 	interruptNumber;

wire	[WIDTH - 1 : 0] isInterruptSet;

InterruptCatcher #(WIDTH) InterruptCatcher_instance (
	.externalInterrupts(externalInterrupts),
	.setInterrupt(setInterrupt),
	.PSWI(PSWI),
	.interrupt(isInterruptSet)
);

wire	[WIDTH - 1 : 0] value;

TransparentLatch  transparentLatch[WIDTH - 1 : 0] (
	.set(isInterruptSet),
	.reset(resetInterrupt),
	.value(value)
);

integer i;
always @(*) begin
	address 					= {32{1'bz}};
	interruptPresent	= 1'b0;
	interruptNumber		= 1'bz;
	for (i = WIDTH - 1; i >= 0; i = i - 1) begin
		if (value[i] == 1'b1) begin
			address 					= {1'b0, i, 2'b00};
			interruptPresent	= 1'b1;
			interruptNumber		= i;
		end
	end
end
	
endmodule
